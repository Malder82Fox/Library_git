cd - изменить директорию, папку
	~ - вернуться в домашнию папку
	../ - выйти на уровень выше

ls - показать содержимое папки
	-a покажет скрытые файла 

mkdir - создать папку, диркторию

touch - создать файл

cp - скопировать файл в файл_новый

mv - переименовать файл в файл_НОВЫЙ

echo - записать "ТЕКСТ" > (в файл)
			>> записывает "ТЕКСТ" в конец файла, т.е. добовляет новый не удаляя старый.)))

cat - просмотреть файл

rm - удалить файл
	-r рекурсивное удаление, папки с файлами

tree - показать дерево папок

history - показывает историю комманд в терминале



GIT_git

git config --global user.email "you@example.com" - регистрируем свою почту

git config --global user.name "Your Name" - регистрируем свое имя

git init - создать репозиторий в текущей папке

git status - показывает статус репозитория 

git remote add origin (ссылка на репозиторий) - синхронизация между локальным и облачным репозиторием

git remote -v - показывает список соединений локального и облачного репозитория

git add файл - добавление файла в индекс изменений

git rm --cached файл - удалить файл из индекса изменений

git commit - создание коммита, изменения в репозитории, после в редакторе пишем сообщение про внесенные изменения
	-m "ЗАПИСЬ СООБЩЕНИЯ КОММИТА" (папки ???)
	-am "ЗАПИСЬ СООБЩЕНИя КОММИТА" используем без предварительной команды git add. (файлы ???)

touch ИМЯ_ПАПКИ/.gitkeep - добовляет скрытый файл.gitkeep для репозитория, 
	в будущем можно туда поместить рисунки. Для начала нужно создать папку ИМЯ_ПАПКИ командой mkdir
	GIT очень капризен для пустых папок.

touch .gitignore - создает скрытый файл, в котором указываются правила, 
		наименования файлов которые не будут записываться в наши коммиты, 
		остануться только у меня на локальной версии.
В простейшем случае репозиторий будет иметь один файл .gitignore в корневом каталоге, 
правила из которого будут рекурсивно применяться ко всем подкаталогам. Так же возможно использовать .gitignore 
файлы в подкаталогах. Правила из этих файлов будут применяться только к каталогам, в которых они находятся.

git log показывает историю коммитов сделаных в репозитории
	--oneline  более компактная версия истории коммитов 
	
git reset (указываем хэш коммита) - сбрасывает указанный коммит

git reflog - пишет более подробную истори коммитов, какие удалены, и т.д.

git revert (указываем хэш коммита) - отменяет указаный по хэшу коммит, создает новый комит

git restore (название файла) - сбрасывает состояние указаного файла до последнего коммита

git branch - показывает количество и наименование веток в репозитории
	   (указываем название новой ветки, например dev) в репозитори  создатся новая ветка
	   (указываем название ветки, например dev-master, далее указываем название ветки от которой необходимо сделать ответвление, например
	   	master (git branch dev-master master)
	   
git checkout (название ветки, на которую хойтим переключиться) переключиться на другую ветку, переход
	     -b dev-test -переключиться на указаную ветку, если её ещё нет то она создался
	    
git puch - Склонировать репозиторий с локального на облачный (origin)







 



 
